# from gc import callbacks
# from pickletools import markobject
#
# from aiogram.fsm.storage.memory import MemoryStorage
# from aiogram.types import Message, CallbackQuery
# from aiogram.utils.keyboard import InlineKeyboardBuilder
# from unicodedata import category
#
# from sendingtogroups import SendGroup
# from aiogram.filters import Command
# from aiogram import Bot, Dispatcher, types
# from aiogram import Router
#
# API_TOKEN = "8198728804:AAFpmPJ820ZVGVgc5LBS_IHnbjkcpPoV6oo"
# CHANNEL_ID = "-4583360988"
#
#
#
# bot = Bot(token=API_TOKEN)
# storage = MemoryStorage()
# dp = Dispatcher(storage=storage)
#
#
# router = Router()
#
# # Start command handler
# @router.message(Command("start"))
# async def start(message: Message):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–¥–µ—Å—å –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ç–∏—Ü–∏—é –∏–ª–∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è —Ä–µ–∫—Ç–æ—Ä—É –∞–Ω–æ–Ω–∏–º–Ω–æ.")
#     markup = InlineKeyboardBuilder()
#     markup.button(text="–°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é –ø–µ—Ç–∏—Ü–∏—é", callback_data='petition')
#     markup.button(text="–ñ–∞–ª–æ–±—ã –Ω–∞ —Ä–µ–∫—Ç–æ—Ä–∞", callback_data='zhalob')
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup.as_markup())
#
#
# # Petition callback handler
# @router.callback_query(lambda call: call.data == "petition")
# async def handle_petition(call: CallbackQuery):
#
#
#     markup = InlineKeyboardBuilder()
#     markup.button(text= '–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞' , callback_data ="infastur")
#     markup.button(text='–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' , callback_data='education')
#     markup.button(text='–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data="Social")
#     markup.button(text='–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã' , callback_data='Environmental')
#     markup.button(text='–í–æ–ø—Ä–æ—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' , callback_data='Security')
#     markup.button(text='Others' , callback_data='others')
#     await call.message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup.as_markup())
#
#
#
#
#
#
#     # Set up a message handler to capture the petition question
#
#
# @router.callback_query(lambda call: call.data == "infastur" or
#                                   call.data == "education" or
#                                   call.data == "Social" or
#                                   call.data == "Security" or
#                                   call.data == "others" or
#                                   call.data == "Environmental")
#
# async def handlebuttons(call : CallbackQuery):
#     category = ""
#
#     if call.data== "infastur":
#         category = "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"
#
#         await call.message.edit_text("–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
#     if call.data== "education":
#         category = "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
#         await call.message.edit_text("–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
#     if call.data== "Social":
#         category = "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
#         await call.message.edit_text("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
#     if call.data== "Environmental":
#         category = "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
#         await call.message.edit_text("–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
#     if call.data== "Security":
#         category = "–í–æ–ø—Ä–æ—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
#         await call.message.edit_text("–í–æ–ø—Ä–æ—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
#     if call.data== "others":
#
#         call.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –ø–µ—Ç–∏—Ü–∏—é")
#         @router.message(lambda message:True)
#         async def categorymannual(message: types.Message):
#             category = message.text
#             await call.message.edit(category)
#
#
#     await call.message.answer("–í–∞—à –ø–µ—Ç–µ—Ü–∏—è ? ")
#     @router.message(lambda message: True)
#     async def capture_question(message: types.Message):
#
#         question = message.text
#         await SendGroup.sendtochat(bot, CHANNEL_ID,category ,  question)
#         await message.answer("–ü–µ—Ç–∏—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª!")
#
#
# # Rector complaint callback handler
# @router.callback_query(lambda call: call.data == "zhalob")
# async def handle_zhalob(call: CallbackQuery):
#     await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
#

from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, CallbackQuery
from aiogram import Router
from sendingtogroups import SendGroup

API_TOKEN = "8198728804:AAFpmPJ820ZVGVgc5LBS_IHnbjkcpPoV6oo"
CHANNEL_ID = "-4583360988"

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Bot
bot = Bot(token=API_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Router
router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    waiting_for_category = State()
    waiting_for_petition_text = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start(message: Message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ç–∏—Ü–∏–π –∏ –∂–∞–ª–æ–±!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "üìÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–µ—Ç–∏—Ü–∏—é\n"
        "üìù –ê–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è —Ä–µ–∫—Ç–æ—Ä—É"
    )
    markup = InlineKeyboardBuilder()
    markup.button(text="üìÑ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ç–∏—Ü–∏—é", callback_data='petition')
    markup.button(text="üìù –ñ–∞–ª–æ–±–∞ –Ω–∞ —Ä–µ–∫—Ç–æ—Ä–∞", callback_data='zhalob')
    await message.answer(welcome_text, reply_markup=markup.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ç–∏—Ü–∏–∏
@router.callback_query(lambda call: call.data == "petition")
async def handle_petition(call: CallbackQuery, state: FSMContext):
    markup = InlineKeyboardBuilder()
    markup.button(text="üè¢ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="infrastructure")
    markup.button(text="üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="education")
    markup.button(text="üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="security")
    markup.button(text="‚ôªÔ∏è –≠–∫–æ–ª–æ–≥–∏—è", callback_data="environment")
    markup.button(text="üéâ –°–æ—Ü. –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="social")
    markup.button(text="‚ùì –î—Ä—É–≥–æ–µ", callback_data="other")
    await call.message.edit_text("üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–π –ø–µ—Ç–∏—Ü–∏–∏:", reply_markup=markup.as_markup())
    await state.set_state(Form.waiting_for_category)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(lambda call: call.data in ["infrastructure", "education", "security", "environment", "social", "other"])
async def handle_category(call: CallbackQuery, state: FSMContext):
    category = call.data
    await state.update_data(category=category)

    if category == "other":
        await call.message.edit_text("üìù –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –ø–µ—Ç–∏—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é:")
        await state.set_state(Form.waiting_for_petition_text)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    else:
        await call.message.edit_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {category}\n\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ç–∏—Ü–∏–∏:")
        await state.set_state(Form.waiting_for_petition_text)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ç–∏—Ü–∏–∏
@router.message(StateFilter(Form.waiting_for_petition_text))
async def capture_petition(message: Message, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    petition_text = message.text
    await SendGroup.sendtochat(bot, CHANNEL_ID, category, petition_text)
    await message.answer("‚úÖ –í–∞—à–∞ –ø–µ—Ç–∏—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–∞–ª–æ–±—ã –Ω–∞ —Ä–µ–∫—Ç–æ—Ä–∞
@router.callback_query(lambda call: call.data == "zhalob")
async def handle_zhalob(call: CallbackQuery):
    await call.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∂–∞–ª–æ–±—ã
@router.message(StateFilter("*"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def capture_complaint(message: Message, state: FSMContext):
    complaint_text = message.text
    await SendGroup.sendtochat(bot, CHANNEL_ID, "–ñ–∞–ª–æ–±–∞", complaint_text)  # –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–µ–∫—Å—Ç–∞ –∂–∞–ª–æ–±—ã
    await message.answer("‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!")